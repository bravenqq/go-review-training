go memmory management and model

AbbyNie

2020-04-22

* 进程的内存模型

- code text:代码的在内存中保存的位置

- 静态全局(已初始化的静态全局变量和未初始化的静态全局变量):全局共享变量数据存储的位置

- stack:函数栈变量数据存储位置

- heap:不确定长度或在不同函数栈之间共享的数据存储位置

.image ./1.jpg _ 150

- 每个线程都会分配一个堆栈来保存线程中的数据

** stack

- stack在函数调用时创建strack fram来保存函数内的数据，调用方的寄存器和返回地址

- stack fram的内存结构

.image ./2.PNG _ 200

** stack是如何分配的

- 函数开始执行时创建strak fram来保存局部变量数据

- 保存调用函数的寄存器状态

- 保存调用函数的地址

- stack中的内存是确定

** heap是如何分配的

- heap的内存是在运行时确定

** stack和heap的区别

- stack中的内存是确定的，heap中的内存是在运行时分配的

- stack中的内存是在函数结束时自动回收，heap中的内存需要手动释放或垃圾回收

*** c语言中heap的分配方式

- 使用new函数申请对内存的分配

- 使用free释放内存

*** c语言中c的分配方式缺陷

- 使用new申请的内存并不一定真正需要在内存中分配

- 用户可能会忘记free释放内存而导致内存泄漏

*** go中heap的分配方式

- go中的heap内存分配是由编译器在编译时通过逃逸分析决定的

- 逃逸分析由三种情况决定是否需要将变量的内存分配在堆上

  1.变成需要的内存非常大
  2.变量需要的内存在不能确定
  3.在函数结束时返回了变量的地址

*** go中heap分配的优势

- 尽可能将变量分配在栈上，减少垃圾回收次数

- 用户不用关心变量分配在栈上还是堆上

*** heap内存分配与进程性能的关系
- heap中的内存回收需要垃圾回收机制，比栈上自动回收更复杂和耗时，所以要尽量减小提高程序执行的速度

** 如何思考一个变量的声明
   变量如何使用------》变量的类型------》变量的名称，变量的周期-------》变量的内存分配情况--------》如果变量分配在堆中如何使用变量能减少垃圾回收次数
** 在程序开发过程中如何关注和分析进程的内存，分别可以利用什么工具进行

** 操作系统如何给进程分配内存

** go中内存的分配和管理

** go为什么要自己实现内存分配管理机制
