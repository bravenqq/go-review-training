understating interface in go

Tags:go,interface

nqq

* 什么是channel

- 有缓冲channel和无缓冲channel，两者之间的区别和使用场景

* channel 的操作和使用方式

- 往channel中放入数据

- 从channel中读取数据

- close关闭channel

关闭channel后不能发送值到channel,但是会一直接收channel中的值，没有就接受channel中存储数据类型的零值

向关闭后的channel发送值会崩溃

关闭已关闭的channel会崩溃

- len获取channel中当前的数据的数量

- for range

当channel被关闭并且没有值可接收时for range 会跳出循环

* channel的内存结构

* chanel的使用场景

* channel 的设计原理

.link https://speakerd.s3.amazonaws.com/presentations/10ac0b1d76a6463aa98ad6a9dec917a7/GopherCon_v10.0.pdf

* channel的结构

  type hchan struct {
    qcount   uint           // total data in the queue
    dataqsiz uint           // size of the circular queue
    buf      unsafe.Pointer // points to an array of dataqsiz elements
    elemsize uint16
    closed   uint32
    elemtype *_type // element type
    sendx    uint   // send index
    recvx    uint   // receive index
    recvq    waitq  // list of recv waiters
    sendq    waitq  // list of send waiters

    // lock protects all fields in hchan, as well as several
    // fields in sudogs blocked on this channel.
    //
    // Do not change another G's status while holding this lock
    // (in particular, do not ready a G), as this can deadlock
    // with stack shrinking.
    lock mutex
    }

