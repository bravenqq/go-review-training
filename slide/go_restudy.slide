# golang restudy

AbbyNie

nqq@aozsky.com

Dec,30 2020

## 系统的发展

- 庞大的库和依赖链

- 网络主导

- 客户/服务器重点

- 庞大的集群

- 多核 CPU 的兴起

- 继承的问题

## 静态类型编译语言与动态类型语言的比较

- 类型安全和内存安全

- 对并发和通信的良好支持

- 高效，无延迟的垃圾收集

- 高速编译

## 设计原则

- 保持正交

- 保持语法的简洁，关键字很少

```
foo.Foo *myFoo = new foo.Foo(foo.FOO_INIT) //what's the problem
```

- 减少输入，尽量让语言解决问题，保持类型系统清晰，没有类型层次结构（是指继承吗？）

## 怎么做到高效的开发

### 基本原理（Fundamentals）

### 简洁的语法

1. 语言的关键字是所有语言中最少的

```
example
package main

import (
    "fmt"
    "http"
)

func handler(c *http.Conn, r *http.Request) {
    fmt.Fprintf(c, "Hello, %s.", r.URL.Path[1:])
}
func main() {
    http.ListenAndServe(":8080",
        http.HandlerFunc(handler))
}
```

2. 类型声明简洁清晰，具有类型推断

3. 轻量型类型系统

4. 没有隐式转换：保持明确

5. 无类型的未调整大小的常数：不再为 0x80ULL

6. 结构体的数据和方法是分离的

7. 严格分离接口和实现,接口隐试满足

8. 包的可见不可见通过大小写区分

- 提供许多依赖包

- 工具链

1. godoc

2. gofmt

- debugger

## 如何做到程序的高效性

- 运行时（Run-time）

1. 内存分配和回收

2. 堆栈的处理

3. goroutine

4. channels,Strings, maps, communication channels,reflection

5. 并发（Concurrency）

- 垃圾回收

- Package model

1. 明确的依赖关系可加快构建速度（可加快编译和链接速度），构建速度取决于包管理机制 ？

### 设计方法

1. 依赖项管理

```
If A.go depends on B.go depends on C.go:
- compile C.go, B.go, then A.go.
- to compile A.go, compiler reads B.o not C.o.
```

2. 并发

- 语言级别和运行时支持写成实现并发，垃圾回收

- 语言负责 goroutine 管理，内存管理

- 自动完成将 goroutine 复用到线程,自动增长 goroutine 的堆栈

- 语言不合理的实现垃圾回收很难实现并发

3. 编译优化

## C 语言编译过程

```
1.
源代码------预处理---->预处理文件---compile------>汇编代码--------汇编----->机器码-----link------>可执行文件

```

## 如何做到简洁高效的编程

### 简洁的语法设计

1. 关键字少

2. 类型声明简洁清晰

3. 方法声明与类型声明分离

4. 包的组织管理

5. 接口的设计

6. goroutine 的使用

7. 初始化（initialization）

8. reflection(反射)

9. 动态类型（dynamic types）

10. embedding

11. iterators

12. testing

## Why go

- 编译速度

- 高效快速的开发

- 高并发

- 分布式系统

- 多核网络硬件
